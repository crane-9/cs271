/**
    ALU chip.
    this chip does everything ever forever
*/

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
        // init x -- use zx + nx
        Mux16(a=x, b=false, sel=zx, out=survivingX);

        Not16(in=survivingX, out=notSX);
        Mux16(a=survivingX, b=notSX, sel=nx, out=trueX);

        // init y -- use zy + ny
        Mux16(a=y, b=false, sel=zy, out=survivingY);

        Not16(in=survivingY, out=notSY);
        Mux16(a=survivingY, b=notSY, sel=ny, out=trueY);

        // add + and
        Add16(a=trueX, b=trueY, out=xAddY);
        And16(a=trueX, b=trueY, out=xAndY);

        // pick 
        Mux16(a=xAndY, b=xAddY, sel=f, out=xyFunc);

        // inverse and pick
        Not16(in=xyFunc, out=notXYFunc);
        Mux16(a=xyFunc, b=notXYFunc, sel=no, out=out, out[15]=ng);

}