/**
 * CPU.
 * See README or `readme_src/cpu.png` for implementation guidance.
 */


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution       ixxa cccc ccdd djjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // Parse for A or C instrction
        Not(in=instruction[15], out=instructA);
        Not(in=instructA, out=instructC);

        // Muxing inputs.
        And(a=instructC, b=instruction[5], out=ALUtoA);
        Mux16(a=instruction, b=ALUOut, sel=ALUtoA, out=inA);

        // Write to memory?
        And(a=instructC, b=instruction[3], out=writeM);

        // Parse loading instructions.
        Or(a=instructA, b=ALUtoA, out=loadA);
        And(a=instructC, b=instruction[4], out=loadD);

        // Registers
        ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
        DRegister(in=ALUOut, load=loadD, out=ALUx);

        // Parse `a` bit
        Mux16(a=outA, b=inM, sel=instruction[12], out=ALUy);

        // ALU, + parsing `c` bits
        ALU(x=ALUx, y=ALUy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=outZR, ng=outNG);

        // Jump math/parsing.
        // Prepare with helper values.
        Or(a=outZR, b=outNG, out=notPos);
        Not(in=notPos, out=isPos);

        // Check primary conditions 
        And(a=isPos, b=instruction[0], out=jgt);
        And(a=outZR, b=instruction[1], out=jeq);
        And(a=outNG, b=instruction[2], out=jlt);

        // If any condition is met, jump
        Or8Way(in[0]=jlt, in[1]=jeq, in[2]=jgt, out=qualifiedJump);
        And(a=instructC, b=qualifiedJump, out=loadPC);

        // If not loading PC, increment PC.
        Not(in=loadPC, out=incPC);

        // PC
        PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}